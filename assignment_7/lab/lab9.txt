After reading the instructions for the assignment, I navigated to the server
to obtain a copy of the Diffutils repository with the command:
git clone ~eggert/src/gnu/diffutils. Then I navigated to the directory with
the command cd diffutils and saved the log contents into a text file called
git-log.txt with the command: git log > ../git-log.txt. After that, I did the
same thing for the tag by running the command: git tag > ../git-tag.txt.

Then for number 4, I found the commit entitled: "maint: quote 'like this' or
"like this", not `like this'". To do this, I ran the command: less git-log.txt
and searched for the commit using the / character. I found the commit and
pasted it below:

    commit 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f
    Author: Paul Eggert <eggert@cs.ucla.edu>
    Date:   Wed Jan 25 23:46:16 2012 -0800

        maint: quote 'like this' or "like this", not `like this'

        This is in response to a recent change in the GNU coding standards,
        which now suggest quoting 'like this' or "like this", instead of
        `like this' or ``like this''.
        * HACKING, NEWS, README, README-hacking, TODO, doc/diagmeet.note:
        * doc/diffutils.texi, ms/config.bat, ms/config.site:
        * src/analyze.c, src/cmp.c, src/context.c, src/diff.c:
        * src/diff.h, src/diff3.c, src/dir.c, src/ifdef.c, src/io.c:
        * src/sdiff.c, src/side.c, src/system.h, src/util.c:
        * tests/help-version:
        Quote 'like this' or "like this" in commentary.
        * cfg.mk (old_NEWS_hash): Adjust to reflect new NEWS quoting.
        * man/help2man: Update to 1.40.4 version, with quoting fixed as above.
        * po/en.po: Remove translation involving `, as it's no longer needed.
        * src/cmp.c (try_help, specify_ignore_initial, usage, main):
        * src/diff.c (main, try_help, option_help_msgid, specify_value)
        (compare_files):
        * src/diff3.c (main, try_help, option_help_msgid, usage)
        (read_diff):
        * src/dir.c (compare_names):
        * src/sdiff.c (try_help, usage, check_child_status, main):
        * src/util.c (finish_output):
        * tests/help-version:
        Quote 'like this' in output.

Then I used the command:
git format-patch -1 \
62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f --stdout > ../quote-patch.txt

to create a patch for this specific commit.

My next step was to checkout version 3.0 of Diffutils from my repository. I
did this by running the command: git checkout "v3.0". My terminal printed out
"HEAD is now at 022cd5c... version 3.0"

Now I need to apply the patch from quote-patch.txt onto version 3.0 of
Diffutils. To do this, I ran the command: patch -p1 < ../quote-patch.txt. I
got several errors when doing so as the patch could not find certain lines to
patch, but a majority of the hunks succeeded and were patched.

When I ran "git status" to see what changes occurred, I got the following
output:

    # HEAD detached at v3.0
    # Changes not staged for commit:
    #   (use "git add <file>..." to update what will be committed)
    #   (use "git checkout -- <file>..." to discard changes in working directory)
    #
    #	modified:   NEWS
    #	modified:   README
    #	modified:   TODO
    #	modified:   doc/diagmeet.note
    #	modified:   ms/config.bat
    #	modified:   ms/config.site
    #	modified:   po/en.po
    #	modified:   src/analyze.c
    #	modified:   src/cmp.c
    #	modified:   src/context.c
    #	modified:   src/diff.c
    #	modified:   src/diff.h
    #	modified:   src/diff3.c
    #	modified:   src/dir.c
    #	modified:   src/ifdef.c
    #	modified:   src/io.c
    #	modified:   src/sdiff.c
    #	modified:   src/side.c
    #	modified:   src/system.h
    #	modified:   src/util.c
    #	modified:   tests/help-version
    #
    # Untracked files:
    #   (use "git add <file>..." to include in what will be committed)
    #
    #	NEWS.orig
    #	README-hacking.orig
    #	README-hacking.rej
    #	README.orig
    #	README.rej
    #	cfg.mk.orig
    #	cfg.mk.rej
    #	ms/config.site.orig
    #	src/cmp.c.orig
    #	src/context.c.orig
    #	src/diff.c.orig
    #	src/diff.c.rej
    #	src/diff.h.orig
    #	src/diff3.c.orig
    #	src/diff3.c.rej
    #	src/dir.c.orig
    #	src/sdiff.c.orig
    #	src/system.h.orig
    #	src/util.c.orig
    #	tests/help-version.orig

The top half of the list are files that were changed, but existed before and
the bottom half of the list are new files that did not previously exist.

Then I read about vc-revert for reverting changes and vc-diff to check the
changes for the files.

For all the non .c files, I used vc-revert to make changes. I opened the files
using the command emacs <file name> and then I used the shortcut C-x, v, u.
The files I ran this command with are NEWS, README, TODO, doc/diagmeet.note,
ms/config.bat, ms/config.site, po/en.po, src/diff.h, src/system.h, and
tests/help-version.

For all the .c files, I used vc-diff to discard the changes to comments. To
do this, I used the emacs command C-x, v, =. Once I did that, I used C-c, C-a
to revert all the hunks that did not involve any code (as doing so would
potentially break my program).

After doing that, I carefully looked at all the rejected changes to see if I
needed to include them as well into my program. I ran the command:
ls src/*.c.rej to only show me the .c.rej files that did not get included in
the changes. I looked through both of them and applied the changes manually
by searching for the text in the lines that needed changing and manually made
those changes.

Then, to remove all untracked files, I used the command: git clean -f. I ran
git status and saw half a dozen files, listed below:

    # Changed but not updated:
    #   (use "git add <file>..." to update what will be committed)
    #   (use "git checkout -- <file>..." to discard changes in working directory)
    #
    #	modified:   src/cmp.c
    #	modified:   src/diff.c
    #	modified:   src/diff3.c
    #	modified:   src/dir.c
    #	modified:   src/sdiff.c
    #	modified:   src/util.c

Finally, I ran the command: git diff | wc -l to check how many lines the diff
file has, and it returned 326, which is in the specified range. Then I created
the patch file using the command: git diff > ../quote-3.0-patch.txt.

Next, I opened up README-hacking inside of the diffutils directory and read
the instructions. The first step said to run ./bootsrap, so that was the first
command I ran. After that, I ran ./configure, make, and make check. I used
server lnxsrv06, so I did not need to apply the extra patch.

Then, I ran diff . - and I got the following output:
    diff: cannot compare '-' to a directory

Then I ran diff --help and I got the following output:

    Usage: diff [OPTION]... FILES
    Compare FILES line by line.

    Mandatory arguments to long options are mandatory for short options too.
          --normal                  output a normal diff (the default)
      -q, --brief                   report only when files differ
      -s, --report-identical-files  report when two files are the same
      -c, -C NUM, --context[=NUM]   output NUM (default 3) lines of copied
      context
      -u, -U NUM, --unified[=NUM]   output NUM (default 3) lines of unified
      context
      -e, --ed                      output an ed script
      -n, --rcs                     output an RCS format diff
      -y, --side-by-side            output in two columns
      -W, --width=NUM               output at most NUM (default 130) print
      columns
          --left-column             output only the left column of common
          lines
          --suppress-common-lines   do not output common lines

      -p, --show-c-function         show which C function each change is in
      -F, --show-function-line=RE   show the most recent line matching RE
          --label LABEL             use LABEL instead of file name
                                      (can be repeated)

      -t, --expand-tabs             expand tabs to spaces in output
      -T, --initial-tab             make tabs line up by prepending a tab
          --tabsize=NUM             tab stops every NUM (default 8) print
          columns
          --suppress-blank-empty    suppress space or tab before empty output
          lines
      -l, --paginate                pass output through 'pr' to paginate it

      -r, --recursive                 recursively compare any subdirectories
      found
          --no-dereference            don't follow symbolic links
      -N, --new-file                  treat absent files as empty
          --unidirectional-new-file   treat absent first files as empty
          --ignore-file-name-case     ignore case when comparing file names
          --no-ignore-file-name-case  consider case when comparing file names
      -x, --exclude=PAT               exclude files that match PAT
      -X, --exclude-from=FILE         exclude files that match any pattern in
      FILE
      -S, --starting-file=FILE        start with FILE when comparing
      directories
          --from-file=FILE1           compare FILE1 to all operands;
                                        FILE1 can be a directory
          --to-file=FILE2             compare all operands to FILE2;
                                        FILE2 can be a directory

      -i, --ignore-case               ignore case differences in file contents
      -E, --ignore-tab-expansion      ignore changes due to tab expansion
      -Z, --ignore-trailing-space     ignore white space at line end
      -b, --ignore-space-change       ignore changes in the amount of white
      space
      -w, --ignore-all-space          ignore all white space
      -B, --ignore-blank-lines        ignore changes where lines are all blank
      -I, --ignore-matching-lines=RE  ignore changes where all lines match RE

      -a, --text                      treat all files as text
          --strip-trailing-cr         strip trailing carriage return on input

      -D, --ifdef=NAME                output merged file with '#ifdef NAME'
      diffs
          --GTYPE-group-format=GFMT   format GTYPE input groups with GFMT
          --line-format=LFMT          format all input lines with LFMT
          --LTYPE-line-format=LFMT    format LTYPE input lines with LFMT
        These format options provide fine-grained control over the output
          of diff, generalizing -D/--ifdef.
        LTYPE is 'old', 'new', or 'unchanged'.  GTYPE is LTYPE or 'changed'.
        GFMT (only) may contain:
          %<  lines from FILE1
          %>  lines from FILE2
          %=  lines common to FILE1 and FILE2
          %[-][WIDTH][.[PREC]]{doxX}LETTER  printf-style spec for LETTER
            LETTERs are as follows for new group, lower case for old group:
              F  first line number
              L  last line number
              N  number of lines = L-F+1
              E  F-1
              M  L+1
          %(A=B?T:E)  if A equals B then T else E
        LFMT (only) may contain:
          %L  contents of line
          %l  contents of line, excluding any trailing newline
          %[-][WIDTH][.[PREC]]{doxX}n  printf-style spec for input line number
        Both GFMT and LFMT may contain:
          %%  %
          %c'C'  the single character C
          %c'\OOO'  the character with octal code OOO
          C    the character C (other characters represent themselves)

      -d, --minimal            try hard to find a smaller set of changes
          --horizon-lines=NUM  keep NUM lines of the common prefix and suffix
          --speed-large-files  assume large files and many scattered small
          changes

          --help               display this help and exit
      -v, --version            output version information and exit

    FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE...' or 'FILE... DIR'.
    If --from-file or --to-file is given, there are no restrictions on
    FILE(s).
    If a FILE is '-', read standard input.
    Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.

    Report bugs to: bug-diffutils@gnu.org
    GNU diffutils home page: <http://www.gnu.org/software/diffutils/>
    General help using GNU software: <http://www.gnu.org/gethelp/>

Finally, in order to check that my modified diffutils was a success, I
recloned the directory into one called diffutils-3.0 and then did git checkout
"v3.0" again. after that, I copied the modified diffutils directory and named
it diffutils-3.0-patch. After running the given diff command and generating
the file quote-3.0-test.txt, I ran diff to compare quote-3.0-test.txt and
quote-3.0-patch.txt to see the differences and while they were different, the
differences are innocuous.
